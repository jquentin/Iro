using UnityEngine;
using System.Collections;
using System;
#if UNITY_EDITOR
using UnityEditor;
using System.IO;
#endif


/// <summary>
/// Tiggly constants contains properties depending on the app
/// This way, we can create prefabs or scripts shared among all apps, but applying different behaviours based on the app.
/// A common example is having a shared prefab showing a picture of the app's toys: words, math or shapes, depending on the current app.
/// Tiggly constants also provides an access to the bundle version in the app (as the PlayerSettings are not accessible outside the editor)
/// via an auto generated file created in a Resources folder.
/// The current app is also saved in an auto-generated file, and guessed from the PlayerSetting's bundle id.
/// 
/// TigglyConstants could now technically be static but the instance's methods are kept for retro compatibility.
/// It does not need to be added to any scene anymore, as the variables are stored statically now.
///
/// The auto generated files are checked on Unity launch and updated if needed, with a notification popup message.
/// </summary>
public class TigglyConstants: MonoBehaviour {

	#region Singleton
	private static TigglyConstants _instance;
	public static TigglyConstants instance
	{
		get
		{
			if (_instance == null)
			{
				_instance = FindObjectOfType<TigglyConstants>();
			}
			if (_instance == null)
			{
				GameObject go = new GameObject("TigglyConstants-autogenerated");
				_instance = go.AddComponent<TigglyConstants>();
			}
			return _instance;
		}
	}
	#endregion

	public const string APP_CONSTANTS_PATH = "Assets/AppConstants_autogenerated/Resources/";
	public const string APP_VERSION_FILE_NAME = "AppVersion";
	public const string APP_VERSION_FILE_EXTENSION = ".txt";
	public const string APP_CODE_FILE_NAME = "AppCode";
	public const string APP_CODE_FILE_EXTENSION = ".txt";

	void Awake()
	{
		TigglyConstants[] constants = GameObject.FindObjectsOfType<TigglyConstants>();
		foreach(TigglyConstants constant in constants)
			if(constant != this)
				Destroy(constant.gameObject);
	}

	void Start()
	{
		DontDestroyOnLoad(gameObject);
	}

	private static TigglyApp _tigglyApp = null;
	public static TigglyApp tigglyApp
	{
		get
		{
			if (_tigglyApp == null)
			{
				foreach(TigglyApp app in tigglyApps)
				{
					if (app.bundleId == bundleIdentifier)
					{
						_tigglyApp = app;
						break;
					}
				}
			}
			return _tigglyApp;
		}
	}

	/// <summary>
	/// This enum uses projects' codes, so they are not necessarily the final apps' names.
	/// Do not rename, as Unity serializes the string, not the index, so apps would get broken.
	/// Ocean = Submarine
	/// Theater = Tales = Storyteller = Story Maker
	/// Sesame = Cookie Monster...
	/// </summary>
	public enum App { Undefined, Cardtoons, Addventure, Chef, Safari, Draw, Stamp, Christmas, Ocean, Theater, Doctor, WordsEducation, Sesame, StoryBook, KitchenLab, MathEducation }


	private static string _bundleIdentifier = null;
	public static string bundleIdentifier
	{ 
		get 
		{ 
			if (_bundleIdentifier == null)
			{
				TextAsset ta = Resources.Load(APP_CODE_FILE_NAME) as TextAsset;
				if (ta != null)
					_bundleIdentifier = ta.text;
			}
			return _bundleIdentifier;
		} 
	}

	private static string _appVersion = null;
	public static string appVersionStatic
	{ 
		get 
		{ 
			if (_appVersion == null)
			{
				TextAsset ta = Resources.Load(APP_VERSION_FILE_NAME) as TextAsset;
				if (ta != null)
					_appVersion = ta.text;
				else
					_appVersion = "Unknown";
			}
			return _appVersion;
		} 
	}
	public string appVersion { get { return appVersionStatic; } }

	[System.Flags]
	public enum Toys 
	{
		None = 0,
		Shapes = (1 << 0), 
		Counts = (1 << 1), 
		Words = (1 << 2)
	}

	
	public class TigglyApp
	{
		public App app { get; private set; }
		public string bundleId { get; private set; }
		public string appNamePrefix { get; private set; }
		public string appName { get; private set; }
		public Toys mainToys { get; private set; }
		public Toys secondaryToys { get; private set; }
		public string analyticsTrackingCode { get; private set; }
		public string storePage { get; private set; }
		public string appCodeName { get; private set; }

		public TigglyApp (App app, string bundleId, string appName, string appNamePrefix, Toys mainToys, Toys secondaryToys, string analyticsTrackingCode, string storePage = "", string appCodeName = "")
		{
			this.app = app;
			this.bundleId = bundleId;
			this.appName = appName;
			this.appNamePrefix = appNamePrefix;
			this.mainToys = mainToys;
			this.secondaryToys = secondaryToys;
			this.analyticsTrackingCode = analyticsTrackingCode;
			this.storePage = storePage;
			if (string.IsNullOrEmpty(appCodeName))
				this.appCodeName = app.ToString();
			else
				this.appCodeName = appCodeName;
		}

		public string storeURL { get { return "https://itunes.apple.com/app/id" + storePage; } }
	}
	
	private static TigglyApp[] tigglyApps = new TigglyApp[]
	{
		new TigglyApp(App.Cardtoons, "com.tiggly.cardtoons", "Cardtoons", "Tiggly", Toys.Counts, Toys.None, "UA-43978705-11", "923540012"),
		new TigglyApp(App.Addventure, "com.tiggly.addventure", "Addventure", "Tiggly", Toys.Counts, Toys.None, "UA-43978705-10", "923545246"),
		new TigglyApp(App.Chef, "com.tiggly.chef", "Chef", "Tiggly", Toys.Counts, Toys.None, "UA-43978705-9", "923367559"),
		new TigglyApp(App.Christmas, "com.tiggly.christmas", "Christmas", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-8", "767642449"),
		new TigglyApp(App.Doctor, "com.tiggly.doctor", "Doctor", "Tiggly", Toys.Words, Toys.None, "UA-43978705-14", "971257252"),
		new TigglyApp(App.Doctor, "com.tiggly.doctorChinese", "Doctor", "Tiggly", Toys.Words, Toys.None, "UA-43978705-14", "1131293277", "DoctorChinese"),
		new TigglyApp(App.Draw, "com.tiggly.draw", "Draw", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-3", "718952421"),
		new TigglyApp(App.Draw, "com.cuelogic.tigglydraw", "Draw", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-3", "718952421"),
		new TigglyApp(App.Safari, "com.tiggly.safari", "Safari", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-2", "716679050"),
		new TigglyApp(App.Safari, "com.cuelogic.tigglysafari", "Safari", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-2", "716679050"),
		new TigglyApp(App.Stamp, "com.tiggly.stamp", "Stamp", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-5", "716727860"),
		new TigglyApp(App.Stamp, "com.cuelogic.tigglystamp", "Stamp", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-5", "716727860"),
		new TigglyApp(App.Ocean, "com.tiggly.ocean", "Submarine", "Tiggly", Toys.Words, Toys.None, "UA-43978705-12", "966609991"),
		new TigglyApp(App.Ocean, "com.tiggly.oceanChinese", "Submarine", "Tiggly", Toys.Words, Toys.None, "UA-43978705-12", "1131374542", "Submarine Chinese"),
		new TigglyApp(App.Ocean, "com.tiggly.submarine", "Submarine", "Tiggly", Toys.Words, Toys.None, "UA-43978705-12", "966609991"),
		new TigglyApp(App.Theater, "com.tiggly.theater", "Story Maker", "Tiggly", Toys.Words, Toys.None, "UA-43978705-13", "969256436"),
		new TigglyApp(App.Theater, "com.tiggly.theaterChinese", "Story Maker", "Tiggly", Toys.Words, Toys.None, "UA-43978705-13", "1131374546", "Story Maker Chinese"),
		new TigglyApp(App.Theater, "com.tiggly.tales", "Story Maker", "Tiggly", Toys.Words, Toys.None, "UA-43978705-13", "969256436"),
		new TigglyApp(App.WordsEducation, "com.tiggly.WordsEducation", "Words - Education Edition", "Tiggly", Toys.Words, Toys.None, "UA-43978705-15", "1039585269"),
		new TigglyApp(App.StoryBook, "com.tiggly.storyBook", "Shape's got Talent", "Tiggly", Toys.Shapes, Toys.None, "UA-43978705-16", "983631516"),
		new TigglyApp(App.Sesame, "com.tiggly.SesameCookieMonster", "Alphabet Kitchen", "Sesame Street", Toys.Words, Toys.None, "UA-54080001-3", "1039971485"),
		new TigglyApp(App.Sesame, "com.sesameworkshop.tigglywords", "Alphabet Kitchen", "Sesame Street", Toys.Words, Toys.None, "UA-54080001-3", "1039971485"),
		new TigglyApp(App.Sesame, "com.sesameworkshop.alphabetkitchen", "Alphabet Kitchen", "Sesame Street", Toys.Words, Toys.None, "UA-54080001-3", "1039971485"),
		new TigglyApp(App.KitchenLab, "com.tiggly.KitchenLab", "Chef Subtraction", "Tiggly", Toys.Counts, Toys.None, "UA-43978705-17", "1046592833"),
		new TigglyApp(App.MathEducation, "com.tiggly.MathEducation", "Math Education", "Tiggly", Toys.Counts, Toys.None, "UA-43978705-18"),
		new TigglyApp(App.Undefined, "com.tiggly.Undefined", "Undefined", "Tiggly", Toys.None, Toys.None, "")
	};

	// Toys used in the core gameplay
	public Toys mainToys
	{
		get
		{
			return tigglyApp.mainToys;
		}
	}

	// Toys detected in the app for fun, but not used in the core gameplay
	public Toys secondaryToys
	{
		get
		{
			return tigglyApp.secondaryToys;
		}
	}
	
	public string moreInfoURL
	{
		get
		{
			if (tigglyApp.app == App.WordsEducation)
				return "https://www.tiggly.com/education";
			else if (tigglyApp.app == App.Sesame)
				return "https://www.tiggly.com/sesame?utm_source=AppsSettings&utm_medium=Sesame-learn-more&utm_campaign=Sesame-learn-more";
			switch (mainToys)
			{
			case Toys.Counts:
				return "https://www.tiggly.com/math?utm_source=AppsSettings&utm_medium=Math-learn-more&utm_campaign=Math-learn-more";
			case Toys.Shapes:
				return "https://www.tiggly.com/shapes?utm_source=AppsSettings&utm_medium=Shapes-learn-more&utm_campaign=Shapes-learn-more";
			case Toys.Words:
				if (StoreSelection.store == StoreSelection.Store.ChineseStore || StoreSelection.store == StoreSelection.Store.ChineseGooglePlay)
					return "https://wap.koudaitong.com/v2/feature/icng1qaw";
				else
					return "https://www.tiggly.com/wordsVIP?utm_source=AppsSettings&utm_medium=Words-learn-more&utm_campaign=Words-learn-more";
			default:
				return "https://www.tiggly.com/wordsVIP?utm_source=AppsSettings&utm_medium=Words-learn-more&utm_campaign=Words-learn-more";
			}
		}
	}

	public string moreInfoUnlockURL
	{
		get
		{
			if (tigglyApp.app == App.Sesame)
				return "https://www.tiggly.com/word-toys?utm_source=Alphabet&utm_medium=More-info&utm_campaign=Sesame-more-info";
			else
				return moreInfoURL;
		}
	}
	
	//the link that gets opened when pressing the buy button in the shopping page:
	public string shoppingURL
	{
		get
		{
			if (tigglyApp.app == App.Sesame)
				return "https://www.tiggly.com/sesame?utm_source=AppsSettings&utm_medium=Sesame-buy-now&utm_campaign=Sesame-buy-now";
			switch (mainToys)
			{
			case Toys.Counts:
				return "https://www.tiggly.com/math?utm_source=AppsSettings&utm_medium=Math-buy-now&utm_campaign=Math-buy-now";
			case Toys.Shapes:
				return "https://www.tiggly.com/shapes?utm_source=AppsSettings&utm_medium=Shapes-buy-now&utm_campaign=Shapes-buy-now";
			case Toys.Words:
				if (StoreSelection.store == StoreSelection.Store.ChineseStore || StoreSelection.store == StoreSelection.Store.ChineseGooglePlay)
					return "http://wap.koudaitong.com/v2/feature/icng1qaw";
				else
					return "https://www.tiggly.com/wordsVIP?utm_source=AppsSettings&utm_medium=Words-buy-now&utm_campaign=Words-buy-now";
			default:
				return "https://www.tiggly.com/wordsVIP?utm_source=AppsSettings&utm_medium=Words-buy-now&utm_campaign=Words-buy-now";
			}
		}
	}

	public string appName
	{
		get
		{
			return tigglyApp.appName;
		}
	}

	public string analyticsTrackingCode
	{
		get
		{
			return tigglyApp.analyticsTrackingCode;
		}
	}
	
	public string mainToysName
	{
		get
		{
			switch (mainToys)
			{
			case Toys.Counts:
				return "Math";
			case Toys.Shapes:
				return "Shapes";
			case Toys.Words:
				return "Words";
			default:
				return "Unknown";
			}
		}
	}

#if UNITY_EDITOR

	public static Action OnAppCodeChanged;

	[MenuItem("Tiggly/App Constants/Update Version Number")]
	public static void UpdateVersionNumber()
	{
		string path = APP_CONSTANTS_PATH + APP_VERSION_FILE_NAME + APP_VERSION_FILE_EXTENSION;
		Directory.CreateDirectory(Path.GetDirectoryName(path));
		File.WriteAllText(path, PlayerSettings.bundleVersion);
	}
	
	[MenuItem("Tiggly/App Constants/Update App Code")]
	public static void UpdateAppCode()
	{
		if (PlayerSettings.applicationIdentifier != bundleIdentifier)
		{
			string path = APP_CONSTANTS_PATH + APP_CODE_FILE_NAME + APP_CODE_FILE_EXTENSION;
			Directory.CreateDirectory(Path.GetDirectoryName(path));
			File.WriteAllText(path, PlayerSettings.applicationIdentifier);
			_bundleIdentifier = PlayerSettings.applicationIdentifier;
			if (OnAppCodeChanged != null)
				OnAppCodeChanged();
		}
	}
	
	[MenuItem("Tiggly/App Constants/Update All Constants")]
	public static void UpdateAllConstants()
	{
		UpdateAppCode();
		UpdateVersionNumber();
	}
	
	public static bool isUpToDate
	{
		get
		{
			return (appVersionStatic == PlayerSettings.bundleVersion && bundleIdentifier == PlayerSettings.applicationIdentifier);
		}
	}

#endif
	
}

#if UNITY_EDITOR

[InitializeOnLoad]
class TigglyConstantsEditor
{
	static string bundleVersion;
	static string bundleId;

	static TigglyConstantsEditor ()
	{
		bundleVersion = PlayerSettings.bundleVersion;
		bundleId = PlayerSettings.applicationIdentifier;
		CheckConstants();
		//TODO: JQ: Find a way to update only once the user is done editing the Settings. For now it pops at each character change. So disabled for now.
//		EditorApplication.update += Update;
	}

	static void CheckConstants()
	{
		if (!TigglyConstants.isUpToDate)
			if (EditorUtility.DisplayDialog("The Tiggly App's constants are out of date", "Updating the constants automatically.\n Constants are stored in " + TigglyConstants.APP_CONSTANTS_PATH, "Update"))
				TigglyConstants.UpdateAllConstants();
	}
	
	static void Update ()
	{
		if (bundleVersion != PlayerSettings.bundleVersion || bundleId != PlayerSettings.applicationIdentifier)
		{
			CheckConstants();
			bundleVersion = PlayerSettings.bundleVersion;
			bundleId = PlayerSettings.applicationIdentifier;
		}
	}
}

#endif
